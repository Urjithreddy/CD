# -*- coding: utf-8 -*-
"""week 1 cd

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/173AsPyR9FCgMpWKI7ouMBXcjckjbfxEJ

Write a program to print n prime nos
"""

#include <stdio.h>
#include <stdbool.h>

// Function to check if a number is prime
bool isPrime(int num) {
    if (num <= 1) return false;
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) return false;
    }
    return true;
}

int main() {
    int n, count = 0;
    printf("Enter the number of prime numbers to print: ");
    scanf("%d", &n);

    // Initial number to check for primality
    int num = 2;

    // Print the first n prime numbers
    while (count < n) {
        if (isPrime(num)) {
            printf("%d ", num);
            count++;
        }
        num++;
    }

    return 0;
}

"""Write a program to read a square matrix and
transpose it without using temporary matrix. (Use
functions - main contains only readmatrix(), transpose(),
printmatrix())
"""

#include <stdio.h>

#define N 4 // Assuming a 4x4 matrix, adjust the size as needed.

void readmatrix(int matrix[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }
}

void transpose(int matrix[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = i + 1; j < N; j++) {
            int temp = matrix[i][j];
            matrix[i][j] = matrix[j][i];
            matrix[j][i] = temp;
        }
    }
}

void printmatrix(int matrix[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int matrix[N][N];
    readmatrix(matrix);
    transpose(matrix);
    printmatrix(matrix);
    return 0;
}

"""Write a program to read a sentence from keyboard
and find how many words, and how many vowels are
there in the sentence
"""

#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main() {
  char sentence[1000];
  int i, words = 0, vowels = 0;
  printf("Enter a sentence: ");
  fgets(sentence, sizeof(sentence), stdin);
  for(i=0; sentence[i]!='\0'; ++i) {
    sentence[i] = tolower(sentence[i]);
    if(sentence[i] == 'a' || sentence[i] == 'e' || sentence[i] == 'i' ||
       sentence[i] == 'o' || sentence[i] == 'u') {
      ++vowels;
    }
    if(sentence[i] == ' ' && sentence[i+1] != ' ') {
      ++words;
    }
  }
  if(sentence[0] != ' ') {
    ++words;
  }
  printf("Words: %d\n", words);
  printf("Vowels: %d", vowels);
  return 0;
}

""":Write a program to read a sentence from keyboard and
break them into words, write in an array and sort the words into
dictionary order
"""

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_WORDS 100 // Maximum number of words
#define WORD_LENGTH 50 // Maximum length of a word

int compare(const void *a, const void *b) {
    // The compare function for qsort
    return strcmp(*(const char **)a, *(const char **)b);
}

int main() {
    char sentence[1000]; // Buffer for the input sentence
    char *words[MAX_WORDS]; // Array to hold pointers to the beginning of each word
    int n = 0; // Number of words

    printf("Enter a sentence: ");
    fgets(sentence, sizeof(sentence), stdin); // Read the sentence from the keyboard

    // strtok splits the sentence into words
    char *token = strtok(sentence, " \n");
    while (token != NULL && n < MAX_WORDS) {
        words[n] = (char *)malloc(strlen(token) + 1); // Allocate memory for the word
        strcpy(words[n], token); // Copy the token to the words array
        n++;
        token = strtok(NULL, " \n"); // Get the next word
    }

    // Sort the words array
    qsort(words, n, sizeof(char *), compare);

    // Print the sorted words
    printf("Sorted words:\n");
    for (int i = 0; i < n; i++) {
        printf("%s\n", words[i]);
        free(words[i]); // Free the allocated memory
    }

    return 0;
}

""":Write a program to create a student record (sno, sname,
marks,grade (to be generated by you)) and find the grade
according to marks and insert into the record. Make a list of n
students and sort them based on marks in descending order and
print the result
"""

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the structure for a student record
typedef struct {
    int sno;
    char sname[50];
    int marks;
    char grade;
} Student;

// Function to assign grade based on marks
char calculateGrade(int marks) {
    if (marks >= 90) return 'A';
    else if (marks >= 75) return 'B';
    else if (marks >= 60) return 'C';
    else if (marks >= 50) return 'D';
    else return 'F';
}

// Comparison function for sorting students in descending order of marks
int compareMarks(const void *a, const void *b) {
    Student *studentA = (Student *)a;
    Student *studentB = (Student *)b;
    return studentB->marks - studentA->marks; // Descending order
}

int main() {
    int n;
    printf("Enter the number of students: ");
    scanf("%d", &n);
    Student students[n];

    // Input student details
    for (int i = 0; i < n; i++) {
        printf("Enter details for student %d (sno, name, marks): ", i+1);
        scanf("%d %49s %d", &students[i].sno, students[i].sname, &students[i].marks);
        students[i].grade = calculateGrade(students[i].marks); // Assign grade
    }

    // Sort the students based on marks in descending order
    qsort(students, n, sizeof(Student), compareMarks);

    // Print the sorted student records
    printf("\nSorted student records by marks in descending order:\n");
    for (int i = 0; i < n; i++) {
        printf("Sno: %d, Name: %s, Marks: %d, Grade: %c\n",
               students[i].sno, students[i].sname, students[i].marks, students[i].grade);
    }

    return 0;
}